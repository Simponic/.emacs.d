#+TITLE: Simponic's Settings
#+AUTHOR: Simponic
#+STARTUP: fold

* Packages
** Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (dolist (package '(use-package))
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

* General emacs
** Tab bar mode
#+BEGIN_SRC emacs-lisp
  (defun my-tabbar-buffer-groups () ;; customize to show all normal files in one group
    (list (cond ((string-equal "*" (substring (buffer-name) 0 1)) "emacs")
                 ((eq major-mode 'dired-mode) "emacs")
                 (t "user"))))
  (setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups)
  (tab-bar-mode)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 2)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+END_SRC
** Filesystem stuff
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (global-auto-revert-mode t) ;; Change files on disk as they are updated
#+END_SRC
** Wrap lines
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC
** GUI stuff
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (setq inhibit-startup-screen t) ;; Startup screen
  (if (display-graphic-p)
      (funcall (lambda ()
                 (tool-bar-mode -1) ;; System bar
                 (set-fringe-mode '(1 . 1)) ;; Minimize arrows before and after wrapped lines by setting fringe to 1px
                 (toggle-scroll-bar -1)))) ;; Scroll bar
  (setq frame-resize-pixelwise t) ;; Use 100% of window space
#+END_SRC
** System path (macos)
#+BEGIN_SRC emacs-lisp
  ;; Use system path on macos - needed for node
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

* Theming
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (let ((font "CozetteVector-16"))
    (set-face-attribute 'default nil :font font)
    (set-frame-font font nil t))
#+END_SRC
** Doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
** Doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind ("C-c p" . 'projectile-command-map)
    :init (projectile-mode +1) (setq projectile-enable-caching t)
    :ensure t)
#+END_SRC

* Swiper, Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("C-s" . 'swiper-isearch)
    ("M-x" . 'counsel-M-x)
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1))
#+END_SRC

* Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind ("C-c j" . 'neotree-toggle)
    :init
    ;; slow rendering
    (setq inhibit-compacting-font-caches t)

    ;; set icons theme
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))

    ;; Every time when the neotree window is opened, let it find current file and jump to node
    (setq neo-smart-open t)

    ;; When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically
    (setq projectile-switch-project-action 'neotree-projectile-action)

    (setq neo-window-width 35)

    ;; show hidden files
    (setq-default neo-show-hidden-files t))
#+END_SRC

* Org mode
** General
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (haskell . t)
     (C . t)
     (sql . t)
     (js . t)
     (java . t)
     (python . t)))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** org-appear
#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :ensure t
    :init
    (add-hook 'org-mode-hook 'org-appear-mode))  
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
  (setq org-latex-compiler "xelatex")

  (setq org-latex-listings t)

  (setq org-latex-default-packages-alist
        '(("" "graphicx" t)
          ("" "grffile" t)
          ("" "longtable" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "amssymb" t)
          ("" "capt-of" nil)
          ("" "hyperref" nil)))
  (setq org-latex-classes
        '(("article"
           "\\RequirePackage{fix-cm}
      \\PassOptionsToPackage{svgnames}{xcolor}
      \\documentclass[11pt]{article}
      \\usepackage{fontspec}
      \\usepackage{sectsty}
      \\allsectionsfont{\\sffamily}
      \\usepackage{enumitem}
      \\setlist[description]{style=unboxed,font=\\sffamily\\bfseries}
      \\usepackage{listings}
      \\lstset{frame=single,aboveskip=1em,
        framesep=.5em,backgroundcolor=\\color{AliceBlue},
        rulecolor=\\color{LightSteelBlue},framerule=1pt}
      \\usepackage{xcolor}
      \\newcommand\\basicdefault[1]{\\scriptsize\\color{Black}\\ttfamily#1}
      \\lstset{basicstyle=\\basicdefault{\\spaceskip1em}}
      \\lstset{literate=
            {§}{{\\S}}1
            {©}{{\\raisebox{.125ex}{\\copyright}\\enspace}}1
            {«}{{\\guillemotleft}}1
            {»}{{\\guillemotright}}1
            {Á}{{\\'A}}1
            {Ä}{{\\\"A}}1
            {É}{{\\'E}}1
            {Í}{{\\'I}}1
            {Ó}{{\\'O}}1
            {Ö}{{\\\"O}}1
            {Ú}{{\\'U}}1
            {Ü}{{\\\"U}}1
            {ß}{{\\ss}}2
            {à}{{\\`a}}1
            {á}{{\\'a}}1
            {ä}{{\\\"a}}1
            {é}{{\\'e}}1
            {í}{{\\'i}}1
            {ó}{{\\'o}}1
            {ö}{{\\\"o}}1
            {ú}{{\\'u}}1
            {ü}{{\\\"u}}1
            {¹}{{\\textsuperscript1}}1
                  {²}{{\\textsuperscript2}}1
                  {³}{{\\textsuperscript3}}1
            {ı}{{\\i}}1
            {—}{{---}}1
            {’}{{'}}1
            {…}{{\\dots}}1
                  {⮠}{{$\\hookleftarrow$}}1
            {␣}{{\\textvisiblespace}}1,
            keywordstyle=\\color{DarkGreen}\\bfseries,
            identifierstyle=\\color{DarkRed},
            commentstyle=\\color{Gray}\\upshape,
            stringstyle=\\color{DarkBlue}\\upshape,
            emphstyle=\\color{Chocolate}\\upshape,
            showstringspaces=false,
            columns=fullflexible,
            keepspaces=true}
      \\usepackage[a4paper,margin=1in,left=1.5in]{geometry}
      \\usepackage{parskip}
      \\makeatletter
      \\renewcommand{\\maketitle}{%
        \\begingroup\\parindent0pt
        \\sffamily
        \\Huge{\\bfseries\\@title}\\par\\bigskip
        \\LARGE{\\bfseries\\@author}\\par\\medskip
        \\normalsize\\@date\\par\\bigskip
        \\endgroup\\@afterindentfalse\\@afterheading}
      \\makeatother
      [DEFAULT-PACKAGES]
      \\hypersetup{linkcolor=Blue,urlcolor=DarkBlue,
        citecolor=DarkRed,colorlinks=true}
      \\AtBeginDocument{\\renewcommand{\\UrlFont}{\\ttfamily}}
      [PACKAGES]
      [EXTRA]"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

          ("report" "\\documentclass[11pt]{report}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

          ("book" "\\documentclass[11pt]{book}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

#+END_SRC
* Development
** Git
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
#+END_SRC
** Languages
*** Common Lisp
**** Slime
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :init
    (setq inferior-lisp-program "sbcl"))
#+END_SRC
